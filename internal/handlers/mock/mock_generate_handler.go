// Code generated by mockery. DO NOT EDIT.

package mock_handlers

import mock "github.com/stretchr/testify/mock"

// GenerateHandler is an autogenerated mock type for the GenerateHandler type
type GenerateHandler struct {
	mock.Mock
}

type GenerateHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *GenerateHandler) EXPECT() *GenerateHandler_Expecter {
	return &GenerateHandler_Expecter{mock: &_m.Mock}
}

// GenerateWireSet provides a mock function with given fields: verbose
func (_m *GenerateHandler) GenerateWireSet(verbose bool) error {
	ret := _m.Called(verbose)

	if len(ret) == 0 {
		panic("no return value specified for GenerateWireSet")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(bool) error); ok {
		r0 = rf(verbose)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GenerateHandler_GenerateWireSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateWireSet'
type GenerateHandler_GenerateWireSet_Call struct {
	*mock.Call
}

// GenerateWireSet is a helper method to define mock.On call
//   - verbose bool
func (_e *GenerateHandler_Expecter) GenerateWireSet(verbose interface{}) *GenerateHandler_GenerateWireSet_Call {
	return &GenerateHandler_GenerateWireSet_Call{Call: _e.mock.On("GenerateWireSet", verbose)}
}

func (_c *GenerateHandler_GenerateWireSet_Call) Run(run func(verbose bool)) *GenerateHandler_GenerateWireSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool))
	})
	return _c
}

func (_c *GenerateHandler_GenerateWireSet_Call) Return(_a0 error) *GenerateHandler_GenerateWireSet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GenerateHandler_GenerateWireSet_Call) RunAndReturn(run func(bool) error) *GenerateHandler_GenerateWireSet_Call {
	_c.Call.Return(run)
	return _c
}

// NewGenerateHandler creates a new instance of GenerateHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGenerateHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *GenerateHandler {
	mock := &GenerateHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
